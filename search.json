[{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/articles/SemanticDistance.html","id":"install-package-and-load-library","dir":"Articles","previous_headings":"","what":"Install package and load library","title":"SemanticDistance","text":"","code":"#install.packages(\"devtools\") # to install development version, run this #devtools::install_github(\"Reilly-ConceptsCognitionLab/ConversationAlign\") #installs from github library(SemanticDistance) #> Warning: replacing previous import 'ape::rotate' by 'dendextend::rotate' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'ape::ladderize' by 'dendextend::ladderize' #> when loading 'SemanticDistance' #> Warning: replacing previous import 'ape::where' by 'dplyr::where' when loading #> 'SemanticDistance' #> Warning: replacing previous import 'dplyr::as_data_frame' by #> 'igraph::as_data_frame' when loading 'SemanticDistance' #> Warning: replacing previous import 'ape::ring' by 'igraph::ring' when loading #> 'SemanticDistance' #> Warning: replacing previous import 'ape::edges' by 'igraph::edges' when loading #> 'SemanticDistance' #> Warning: replacing previous import 'ape::mst' by 'igraph::mst' when loading #> 'SemanticDistance' #> Warning: replacing previous import 'dplyr::groups' by 'igraph::groups' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'dplyr::union' by 'igraph::union' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'ape::degree' by 'igraph::degree' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'magrittr::set_names' by 'purrr::set_names' #> when loading 'SemanticDistance' #> Warning: replacing previous import 'igraph::simplify' by 'purrr::simplify' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'igraph::compose' by 'purrr::compose' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'purrr::%@%' by 'rlang::%@%' when loading #> 'SemanticDistance' #> Warning: replacing previous import 'purrr::flatten_lgl' by 'rlang::flatten_lgl' #> when loading 'SemanticDistance' #> Warning: replacing previous import 'purrr::splice' by 'rlang::splice' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'purrr::flatten_chr' by 'rlang::flatten_chr' #> when loading 'SemanticDistance' #> Warning: replacing previous import 'purrr::flatten_raw' by 'rlang::flatten_raw' #> when loading 'SemanticDistance' #> Warning: replacing previous import 'igraph::is_named' by 'rlang::is_named' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'purrr::flatten' by 'rlang::flatten' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'purrr::flatten_dbl' by 'rlang::flatten_dbl' #> when loading 'SemanticDistance' #> Warning: replacing previous import 'purrr::invoke' by 'rlang::invoke' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'purrr::flatten_int' by 'rlang::flatten_int' #> when loading 'SemanticDistance' #> Warning: replacing previous import 'dplyr::lag' by 'stats::lag' when loading #> 'SemanticDistance' #> Warning: replacing previous import 'dplyr::filter' by 'stats::filter' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'igraph::spectrum' by 'stats::spectrum' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'dendextend::cutree' by 'stats::cutree' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'igraph::decompose' by 'stats::decompose' #> when loading 'SemanticDistance' #> Warning: replacing previous import 'igraph::crossing' by 'tidyr::crossing' when #> loading 'SemanticDistance' #> Warning: replacing previous import 'magrittr::extract' by 'tidyr::extract' when #> loading 'SemanticDistance' #> Registered S3 method overwritten by 'wesanderson': #>   method        from      #>   print.palette MetBrewer"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/articles/SemanticDistance.html","id":"semantic-distance-what-it-does-","dir":"Articles","previous_headings":"","what":"Semantic Distance: What it does.","title":"SemanticDistance","text":"Semantic distance empirical measure distance two elements (words, ngrams, documents) within n-dimensional semantic space. many ways measure semantic distance. SemanticDistance package appends pairwise cosine distance values different chunks language chunk sizes specified user (e.g., word--word, ngram--word). package derives empirical distance values indexing two large lookup databases embedded within package. databases include fixed semantic vectors many English words. One measure (CosDist_Glo) reflects distance pairwise vectors (Dog:Leash) derived training GLOVE word embedding model (300 hyperparameters per word). complementary metric (CodDist_SD15) refects cosine distance two chunks (words, groups words) characterized across 15 meaningful perceptual affective dimensions (e.g., color, sound, valence). SemanticDistance cleans formats target text applying variety options (e.g., leave alone, clean punctuation, omit stopwords, lemmatize strings). package can handle variety dataframe formats, including ordered monologues, word pairs arrayed columns, unordered word lists, dialogue transcripts marked talker information. SemanticDistance scans cleaned/formatted dataframe computes two different metrics semantic distance successive chunks (e.g., ngrams, words, turns). two semantic distance values reflect pairwise cosine distance (0 2) two different high dimensional semantic spaces. Experiential semantic distance (SD15) reflects pairwise distance two word vectors (e.g., dog:cat) spanning 15 meaningful semantic dimensions (e.g., color, sound, valence). Embedding-based semantic distances (Glo) derived contrasting word’s semantic vector spanning 300 hyperparameters trained GLOVE word embedding model.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/articles/SemanticDistance.html","id":"step-1-clean-and-prep-your-text","dir":"Articles","previous_headings":"","what":"Step 1: Clean and Prep Your Text","title":"SemanticDistance","text":"SemanticDistance works monologues (talker information), dialogues (two speakers), word pairs arrayed columns, unstructured word lists (hierarchical clustering). Cleaning can even handle unstructured text pasted single cell csv file. However, MUST run appropriate cleaning function run distance functions even apply cleaning options. functions append unique identifiers used distance calculations. Prep string data (csv text) read R (e.g., myrawdat). Call objects variables anything like. SemanticDistance retain metadata. data contain least one column string data (e.g., mytext). Identify format sample (e.g., monologue, dialogue, columns, unstructured). Decide cleaning parameters (lemmatize, omit stopwords, omit punctuation). Specify cleaning function arguments best fit aims.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/articles/SemanticDistance.html","id":"monologue-transcript-clean_monologue","dir":"Articles","previous_headings":"Step 1: Clean and Prep Your Text","what":"Monologue Transcript (clean_monologue)","title":"SemanticDistance","text":"story etc. - basically string word order matters don’t care talker information. target text split unlisted one word per row format.metadata retained. ’s sample monologue sorts junk column called ‘word’. ‘clean_monologue’ function split append unique identifier word retaining empty strings meaningful. Defaults omit stopwords lemmatize.","code":""},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/articles/SemanticDistance.html","id":"step-2-compute-semantic-distance-on-your-prepped-data","dir":"Articles","previous_headings":"","what":"Step 2: Compute Semantic Distance on your Prepped Data","title":"SemanticDistance","text":"SemanticDistance append cosine distance values pair elements specified user (e.g., word--word, ngram--word). distance values derived two large lookup databases package fixed semantic vectors >70k English words. CosDist_Glo reflects cosine distance vectors derived training GLOVE word embedding model (300 hyperparameters per word). CodDist_SD15 refects cosine distance two chunks (words, groups words) characterized across 15 meaningful perceptual affective dimensions (e.g., color, sound, valence). Users specify ngram window size. window rolls successively language sample compute semantic distance value new word relative n-words (ngram size) . model compouting distance illustrated figure. larger specified ngram size smoothed semantic vector language sample. settle window size clean language transcript (works monologues ), ready roll. ’s general idea…","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/articles/SemanticDistance.html","id":"monologues-ngram-to-ngram-distance-dist_ngram2ngram","dir":"Articles","previous_headings":"Step 2: Compute Semantic Distance on your Prepped Data","what":"2.2: Monologues: Ngram-to-Ngram Distance (dist_ngram2ngram)","title":"SemanticDistance","text":"Joins target transcript lookup database word corresponding semantic vector row form. example, interested 4-word chunks, dog-cat-milk-banana (Ngram_4) first ngram. aggregate semantic vectors four words mean vector 4-gram compute distance next 4-gram iterating dataframe last possible chunk four words omitting ‘leftovers’ (residual/remainder divisible ngram size). example 22 words user interested 3-grams, 7 one word left last row.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jamie Reilly. Author, maintainer. Emily B. Myers. Author. Hannah R. Mechtenberg. Author. Jonathan E. Peelle. Author.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Reilly J, Myers E, Mechtenberg H, Peelle J (2025). SemanticDistance: Compute Visualize Pairwise Semantic Distance Relationships Ordered Unordered Language Samples. R package version 0.1.0, https://github.com/Reilly-ConceptsCognitionLab/SemanticDistance.","code":"@Manual{,   title = {SemanticDistance: Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples},   author = {Jamie Reilly and Emily B. Myers and Hannah R. Mechtenberg and Jonathan E. Peelle},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/Reilly-ConceptsCognitionLab/SemanticDistance}, }"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"data-compatibility","dir":"","previous_headings":"","what":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"SemanticDistance can compute pairwise semantic distance relationships ordered unordered language samples, including: Monologues: ordered text sample delineated talker/speaker (e.g., stories, narratives). minimal requirement monologue one row one column text .; Dialogues: ordered language sample split talker/speaker/interlocutor factor. minimum requirment two cells interlocutor identity text; Word Pairs Columns: Paired string data arrayed across two columns (e.g., Dog-Leash); Unordered Word Lists: Unordered list words (nominally one column, text one row) transformed distance matrix, network model, dendrogram","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"prep-and-analyze-your-data","dir":"","previous_headings":"","what":"Prep and Analyze Your Data","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Store text project files within dedicated folder/directory (e.g., ‘mytexts/’) Format data CSV txt. Although SemanticDistance fairly robust different character encodings, many proograms Excel introduce weird hidden characters strings. Label target text metadata columns offline however like (e.g., mytext, word, langoutput) Import text associated metadata (e.g., document_id, timestamps, etc.) dataframe. Identify format sample (e.g., monologue, dialogue, columns, unstructured). Install load SemanticDistance package Choose principled set cleaning parameters (e.g., omit stopwords? lemmatize?) Run approproate cleaning function best fits data stucture aims Run appropriate distance function best fits data stucture aims Visualize data using built-functions follow-preferred statistical approach. Install development version SemanticDistance GitHub using devtools.","code":"#install.packages(\"devtools\") #devtools::install_github(\"Reilly-ConceptsCognitionLab/SemanticDistance\") library(SemanticDistance)"},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"id_-step-1-clean-monologue-transcript-clean_monologue-","dir":"","previous_headings":"","what":"Step 1: Clean Monologue Transcript (clean_monologue)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Transforms text lowercase optionally cleans (omit stopwords, omit non-alphabetic chars), lemmatizes (transforms morphological derivatives words standard dictionary entries), splits multiword utterances one-word-per row format. can generally leave split_strings default state (TRUE). ‘clean_monologue’ appends several new variables original dataframe: id_row_orig numeric identifier marking original row word group words appeared; ’id_row_postsplit unique identifier marking word’s ordered position dataframe splitting multiword utterances across rows; word_clean result cleaning operations, needed distance calculations. Arguments ‘clean_monologue’:  dat = raw dataframe least one column text wordcol = quoted variable column name target text lives (e.g., ‘mytext’) clean = applies cleaning functions (e.g., punct , lowercase, etc); T/F default TRUE omit_stops = omits stopwords, T/F default TRUE lemmatize = transforms raw word lemmatized form, T/F default TRUE split_strings = option split multiword utterances separate rows, T/F default TRUE","code":"Monologue_Cleaned <- clean_monologue(dat=Monologue_Structured, wordcol='mytext', clean=TRUE, omit_stops=TRUE, split_strings=TRUE) head(Monologue_Cleaned, n=8) #> # A tibble: 8 × 5 #>   id_row_orig word_clean timestamp mytext   id_row_postsplit #>   <fct>       <chr>          <int> <chr>               <int> #> 1 1           <NA>               1 \"the\"                   1 #> 2 2           girl               2 \"girl\"                  2 #> 3 3           walk               3 \"walked\"                3 #> 4 4           down               4 \"down \"                 4 #> 5 5           <NA>               5 \"the \"                  5 #> 6 6           street             6 \"street\"                6 #> 7 7           <NA>               7 \"the\"                   7 #> 8 8           boxer              8 \"boxer\"                 8"},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"option-1-ngram-to-word-distance-dist_ngram2word-","dir":"","previous_headings":"","what":"Option 1: Ngram-to-Word Distance (dist_ngram2word)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Computes cosine distance two models (embedding experiential) using rolling ngram approach consisting groups words (ngrams) next word. IMPORTANT function looks backward target word skipping NAs filling desired ngram size. Arguments ‘dist_ngram2word’: dat = dataframe monologue transcript cleaned prepped clean_monologue fn ngram = window size preceding new content word, ngram=1 means word compared word ","code":"Ngram2Word_Dists1 <- dist_ngram2word(dat=Monologue_Cleaned, ngram=1) #distance word-to-word head(Ngram2Word_Dists1) #> # A tibble: 6 × 7 #>   id_row_orig word_clean timestamp mytext   id_row_postsplit CosDist_1gram_glo #>   <fct>       <chr>          <int> <chr>               <int>             <dbl> #> 1 1           <NA>               1 \"the\"                   1            NA     #> 2 2           girl               2 \"girl\"                  2            NA     #> 3 3           walk               3 \"walked\"                3             0.470 #> 4 4           down               4 \"down \"                 4             0.283 #> 5 5           <NA>               5 \"the \"                  5            NA     #> 6 6           street             6 \"street\"                6             0.362 #> # ℹ 1 more variable: CosDist_1gram_sd15 <dbl>"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"option-2-ngram-to-ngram-distance-dist_ngram2ngram","dir":"","previous_headings":"","what":"Option 2: Ngram-to-Ngram Distance (dist_ngram2ngram)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"User specifies n-gram size (e.g., ngram=2). Distance computed two-word chunk next iterating way dataframe words ‘fill ’ last ngram. Note distance function works monologue transcripts speakers delineated word order matters. Arguments ‘dist_ngram2ngram’:  dat = dataframe w/ monologue sample cleaned prepped ngram = chunk size (chunk--chunk), case ngram=2 means chunks 2 words compared next chunk","code":"Ngram2Ngram_Dist1 <- dist_ngram2ngram(dat=Monologue_Cleaned, ngram=2) head(Ngram2Ngram_Dist1) #> # A tibble: 6 × 7 #>   id_row_orig word_clean timestamp mytext   id_row_postsplit CosDist_2gram_GLO #>   <fct>       <chr>          <int> <chr>               <int>             <dbl> #> 1 1           <NA>               1 \"the\"                   1           NA      #> 2 2           girl               2 \"girl\"                  2           NA      #> 3 3           walk               3 \"walked\"                3           NA      #> 4 4           down               4 \"down \"                 4            0.141  #> 5 5           <NA>               5 \"the \"                  5            0.0608 #> 6 6           street             6 \"street\"                6            0.319  #> # ℹ 1 more variable: CosDist_2gram_SD15 <dbl>"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"option-3-anchor-to-word-distance-dist_anchor2word","dir":"","previous_headings":"","what":"Option 3: Anchor-to-Word Distance (dist_anchor2word)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Models semantic distance successive new word average semantic vectors first block N content words. anchored distance provides metric overall semantic drift language sample unfolds relative fixed starting point. Arguments ‘dist_anchor’:  dat = dataframe monologue sample cleaned prepped using ‘clean_monologue’ anchor_size = size initial chunk words chunk--new-word comparisons fn","code":"Anchored_Dists1 <- dist_anchor(dat=Monologue_Cleaned, anchor_size=8) head(Anchored_Dists1) #> # A tibble: 6 × 4 #>   id_row_postsplit word_clean CosDist_Anchor_GLO CosDist_Anchor_SD15 #>              <int> <chr>                   <dbl>               <dbl> #> 1                1 <NA>                   NA                 NA      #> 2                2 girl                    0.255              0.439  #> 3                3 walk                    0.159              0.173  #> 4                4 down                    0.116              0.275  #> 5                5 <NA>                   NA                 NA      #> 6                6 street                  0.116              0.0457"},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"step-1-clean-dialogue-transcript-clean_dialogue---","dir":"","previous_headings":"","what":"Step 1: Clean Dialogue Transcript (clean_dialogue)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"conversation transcript language sample care talker/interlocutor information (e.g., computing semantic distance across turns conversation). dataframe nominally contain text column speaker/talker column. Arguments ‘clean_dialogue’ :  dat = raw dataframe least one column text talker column wordcol = column name (quoted) containing text want cleaned whotalks = column name (quoted) containing talker ID (convert factor) clean = applies cleaning function, T/F default TRUE omit_stops = omits stopwords, T/F default TRUE lemmatize = transforms raw word lemmatized form, T/F default TRUE","code":"Dialogue_Cleaned <- clean_dialogue(dat=Dialogue_Structured, wordcol=\"mytext\", whotalks = \"speaker\", clean=TRUE, omit_stops=TRUE, lemmatize=TRUE, split_strings=TRUE) head(Dialogue_Cleaned, n=12) #> # A tibble: 12 × 7 #>    id_row_orig word_clean mytext    speaker talker id_row_postsplit id_turn #>    <fct>       <chr>      <chr>     <chr>   <fct>             <int>   <dbl> #>  1 1           donkey     donkey    P1      P1                    1       1 #>  2 2           astronaut  astronaut P2      P2                    2       2 #>  3 3           bubble     bubble    P1      P1                    3       3 #>  4 4           street     street    P2      P2                    4       4 #>  5 5           pigeon     Pigeon    P1      P1                    5       5 #>  6 6           dolphin    Dolphin   P2      P2                    6       6 #>  7 7           eagle      Eagle     P1      P1                    7       7 #>  8 8           eel        eel       P2      P2                    8       8 #>  9 9           test       test      P1      P1                    9       9 #> 10 10          beagle     Beagle    P2      P2                   10      10 #> 11 11          cow        Cow       P1      P1                   11      11 #> 12 12          tiger      Tiger     P2      P2                   12      12"},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"id_-dialogue-distance-turn-to-turn-dist_dialogue","dir":"","previous_headings":"","what":"Dialogue Distance Turn-to-Turn (dist_dialogue)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Averages semantic vectors content words turn computes cosine distance average semantic vectors content words subsequent turn. Note: function works dialogue samples marked talker variable (e.g., conversation transcripts). averages across semantic vectors words within turn computes cosine distance words next turn. just need feed transcript formatted clean_dialogue. ‘dist_dialogue’ return summary dataframe distance values aggregated talker turn (id_turn). Arguments ‘dist_dialogue’ :  dat = dataframe w/ dialogue sample cleaned prepped using ‘clean_dialogue’","code":"DialogueDists <- dist_dialogue(dat=Dialogue_Cleaned) head(DialogueDists) #> # A tibble: 6 × 5 #>   turn_count talker n_words glo_cosdist sd15_cosdist #>        <int> <fct>    <int>       <dbl>        <dbl> #> 1          1 P1           1       0.993        0.856 #> 2          2 P2           1       0.933        0.413 #> 3          3 P1           1       0.732        0.472 #> 4          4 P2           1       0.927        0.406 #> 5          5 P1           1       0.809        0.624 #> 6          6 P2           1       0.772        0.192"},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"id_-step-1-clean-word-pairs-clean_paired_cols-","dir":"","previous_headings":"","what":"Step 1 Clean Word Pairs (clean_paired_cols)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"SemanticDistance also computes pairwise distance data arrayed columns. Run function, cleaned columns appear dataframe. Arguments ‘clean_paired_cols’ :  dat = raw dataframe two columns paired text word1 = quoted variable reflecting column name first word lives word2 = quoted variable reflecting column name first word lives clean = applies cleaning functions, T/F default TRUE omit_stops = omits stopwords, T/F default TRUE lemmatize = transforms raw word lemmatized form, T/F default TRUE","code":"WordPairs_Clean <- clean_paired_cols(dat=Word_Pairs, wordcol1='word1', wordcol2='word2', clean=TRUE, omit_stops=TRUE, lemmatize=TRUE) head(WordPairs_Clean, n=12) #view head cleaned data #>    word1     word2 id_row_orig word1_clean1 word2_clean2 #> 1    Dog   trumpet           1          dog      trumpet #> 2    the    BANANA           2         <NA>       banana #> 3    rat astronaut           3          rat    astronaut #> 4   *&^%    lizard           4         <NA>       lizard #> 5   bird      bird           5         bird         bird #> 6  shark     shark           6        shark        shark #> 7  table     38947           7        table         <NA> #> 8    Dog     leash           8          dog        leash #> 9    cat       fur           9          cat          fur #> 10     ^     whale          10         <NA>        whale #> 11 steak    potato          11        steak       potato #> 12   bed    pillow          12          bed       pillow"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"step-2-distance-word-pairs-columns-dist_paired_cols-","dir":"","previous_headings":"","what":"Step 2: Distance Word Pairs Columns (dist_paired_cols)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Generates semantic distances (Glove SD15) word pairs separate columns. Output ‘dist_paired_cols’ 2-column arrayed dataframe. Arguments dist_paired_cols: Arguments ‘dist_paired_cols’ :  dat = dataframe w/ word pairs arrayed columns cleaned prepped using ‘clean_2cols’ fn","code":"Columns_Dists <- dist_paired_cols(WordPairs_Clean) #only argument is dataframe head(Columns_Dists) #>   word1     word2 id_row_orig word1_clean1 word2_clean2 CosDist_SD15 #> 1   Dog   trumpet           1          dog      trumpet    0.4534507 #> 2   the    BANANA           2         <NA>       banana           NA #> 3   rat astronaut           3          rat    astronaut    1.2154729 #> 4  *&^%    lizard           4         <NA>       lizard           NA #> 5  bird      bird           5         bird         bird    0.0000000 #> 6 shark     shark           6        shark        shark    0.0000000 #>   CosDist_GLO #> 1   0.8409885 #> 2          NA #> 3   0.9272540 #> 4          NA #> 5   0.0000000 #> 6   0.0000000"},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"step-1-clean-unordered-word-list-clean_unordered","dir":"","previous_headings":"","what":"Step 1: Clean unordered word list (clean_unordered)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Prep vector words hierarchical clustering network visualization. ‘clean_unordered’ retain one instance string (distinct, duplicates) missing values. Arguments ‘clean_unordered’ :  df = raw dataframe least one column text wordcol = quoted variable reflecting text lives clean = applies cleaning functions, T/F default TRUE omit_stops = omits stopwords, T/F default TRUE lemmatize = transforms raw word lemmatized form, T/F default TRUE","code":"Clusters_Clean <- clean_unordered(dat=Semantic_Clusters, wordcol=\"mytext\", clean=TRUE, omit_stops=TRUE, lemmatize=TRUE) head(Clusters_Clean) #> # A tibble: 6 × 6 #>   id_row_orig word_clean ID_JR mytext   category id_row_postsplit #>   <fct>       <chr>      <int> <chr>    <chr>               <int> #> 1 1           trumpet        1 trumpet  music                   1 #> 2 2           trombone       2 trombone music                   2 #> 3 3           flute          3 flute    music                   3 #> 4 4           piano          4 piano    music                   4 #> 5 5           guitar         5 guitar   music                   5 #> 6 6           gun            6 gun      weapon                  6"},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"distance-matrix-all-word-pairs-dist_matrix","dir":"","previous_headings":"","what":"Distance Matrix All Word Pairs (dist_matrix)","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Returns square matrix entry [,j] cosine distance word word j. Matrix contains original words row column names reference. User specifies whether return matrix based embeddings (GLOVE) experiential norms (SD15). Arguments ‘dist_matrix’ :  dat = dataframe cleaned prepped using ‘clean_unordered4matrix’ fn dist_type = quoted argument default ‘embedding’, option “SD15” fn","code":"MyDistMatrix <- dist_matrix(dat=Clusters_Clean, dist_type='embedding') MyDistMatrix[1:7, 1:7] #Print columns 1:7, rows 1:7 square matrix #>            trumpet  trombone     flute     piano    guitar       gun     knife #> trumpet  0.0000000 0.5717885 0.5138417 0.5558156 0.5520448 0.8668525 0.8766921 #> trombone 0.5717885 0.0000000 0.6698538 0.6488034 0.6219389 0.9475109 0.8880578 #> flute    0.5138417 0.6698538 0.0000000 0.4511922 0.5203509 0.9288003 0.8349393 #> piano    0.5558156 0.6488034 0.4511922 0.0000000 0.2730333 0.8374068 0.7856145 #> guitar   0.5520448 0.6219389 0.5203509 0.2730333 0.0000000 0.7653835 0.7351402 #> gun      0.8668525 0.9475109 0.9288003 0.8374068 0.7653835 0.0000000 0.5440601 #> knife    0.8766921 0.8880578 0.8349393 0.7856145 0.7351402 0.5440601 0.0000000"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"option-1-matrix-to-dendrogram","dir":"","previous_headings":"","what":"Option 1: Matrix to Dendrogram","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"","code":"str(MyDistMatrix) #>  num [1:20, 1:20] 0 0.572 0.514 0.556 0.552 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:20] \"trumpet\" \"trombone\" \"flute\" \"piano\" ... #>   ..$ : chr [1:20] \"trumpet\" \"trombone\" \"flute\" \"piano\" ... MyDendro <- viz_clusters(MyDistMatrix, type=\"dendrogram\") # plots triangular dendrogram with K clusters"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"option-2-matrix-to-igraph-network","dir":"","previous_headings":"","what":"Option 2: Matrix to iGraph Network","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"","code":"MyGraph <- viz_clusters(MyDistMatrix, type=\"network\")"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"data-visualization-options","dir":"","previous_headings":"","what":"Data Visualization Options","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Choose visualization strategy best fits data. ordered? monologue? interested chunk--chunk distance distance new element fixed anchor beginning? three options explained follow:","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"visualize-a-monologue-time-series-ngram2word","dir":"","previous_headings":"","what":"Visualize a Monologue Time Series: ngram2word","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Plots word id_row x-axis (proxy time) distance measure (facetted GLO SD15). Add red line annotation semantic distance jump z>3 based distribution time series, Add options interpolation rolling average window, zscore threshold marking annotation. Arguments ‘viz_monologue’:  dat dataframe CosDist values row_id_postsplit vars appended interpolate T/F linear interpolation option across missing observations row, default TRUE roll_avg rolling average window size, default 0 facet T/F option facet cosine distance type, default TRUE annotate T/F option append annotations (red lines z>2.5 distance jump), default TRUE","code":"clusters_clean <- clean_monologue(dat=Semantic_Clusters, wordcol='mytext', clean=TRUE, omit_stops=TRUE, split_strings=TRUE) clusters_dist <- dist_ngram2word(dat=clusters_clean, ngram=1)  FirstViz <- viz_monologue(dat=clusters_dist, interpolate=TRUE, roll_avg=0, facet=TRUE, annotate=TRUE) #> Warning: Using one column matrices in `filter()` was deprecated in dplyr 1.1.0. #> ℹ Please use one dimensional logical vectors instead. #> ℹ The deprecated feature was likely used in the SemanticDistance package. #>   Please report the issue at #>   <https://github.com/Reilly-ConceptsCognitionLab/SemanticDistance/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. print(FirstViz) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"monologue-time-series-dist_anchor","dir":"","previous_headings":"","what":"Monologue Time Series: dist_anchor","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"","code":"grandpa_clean <- clean_monologue(dat=Grandfather_Passage, wordcol='mytext', clean=TRUE, omit_stops=TRUE, split_strings=TRUE) grandpa_dist <- dist_anchor(grandpa_clean, anchor_size=8)  AnchorViz <- viz_monologue(dat=grandpa_dist, interpolate=TRUE, roll_avg=0, facet=TRUE, annotate=TRUE) print(AnchorViz) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"time-series-plot-for-dialogues","dir":"","previous_headings":"","what":"Time series plot for dialogues","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"Color point talker #Animate Time Series","code":"#TBA #TBA"},{"path":[]},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/index.html","id":"sample-language-transcripts","dir":"","previous_headings":"","what":"Sample Language Transcripts","title":"Compute and Visualize Pairwise Semantic Distance Relationships in Ordered and Unordered Language Samples","text":"SemanticDistance contains sample language transcripts automatically load call package. can helpful evaluating debugging transcripts. Monologue_Structured: Dataframe 1-word per row already split missing observations Monologue_Messy: Dataframe text arrayed one column ‘mytext’, missing observations, junk, multiword phrases contains metadata (simulated timestamps Dialogue_Structured: Dataframe simulating ‘perfect’ conversation transcript, one word per turn, two talkers Dialogue_Messy: Dataframe simulating ‘dirty’ conversation transcript, multiple lines per person, lots stopwords, missing obervations, stray transcription symbols Word_Pairs: Dataframe word pairs arrayed two columns Semantic_Clusters: Dataframe ordered simulated semantic fluency data switching categories every ten words (animals, tools, musical instruments, fruits) Grandfather_Passage: Grandfather Passage – standardized reading passage, unsplit","code":"head(Monologue_Structured) #>   timestamp mytext #> 1         1    the #> 2         2   girl #> 3         3 walked #> 4         4  down  #> 5         5   the  #> 6         6 street head(Monologue_Messy) #>              mytext #> 1  The dog is blue. #> 2               Dog #> 3               Dog #> 4              Some #> 5 My name is Frank. #> 6               Dog head(Dialogue_Structured) #>      mytext speaker #> 1    donkey      P1 #> 2 astronaut      P2 #> 3    bubble      P1 #> 4    street      P2 #> 5    Pigeon      P1 #> 6   Dolphin      P2 head(Dialogue_Messy) #>                  word speaker #> 1            Hi Peter    Mary #> 2    Donkeys are gray    Mary #> 3             Leopard    Mary #> 4 pop goes the weasel    Mary #> 5              Pigeon    Mary #> 6             Dolphin    Mary head(Word_Pairs) #>   word1     word2 #> 1   Dog   trumpet #> 2   the    BANANA #> 3   rat astronaut #> 4  *&^%    lizard #> 5  bird      bird #> 6 shark     shark head(Semantic_Clusters, n=20) #>    ID_JR     mytext  category #> 1      1    trumpet     music #> 2      2   trombone     music #> 3      3      flute     music #> 4      4      piano     music #> 5      5     guitar     music #> 6      6        gun    weapon #> 7      7      knife    weapon #> 8      8    missile    weapon #> 9      9     bullet    weapon #> 10    10      spear    weapon #> 11    11      apple fruit-veg #> 12    12     banana fruit-veg #> 13    13     potato fruit-veg #> 14    14     tomato fruit-veg #> 15    15       kiwi fruit-veg #> 16    16        sad  emotions #> 17    17      happy  emotions #> 18    18      angry  emotions #> 19    19 melancholy  emotions #> 20    20     joyful  emotions GP <- tidyr::separate_rows(Grandfather_Passage, mytext, sep=\" \") head(GP, n=50) #> # A tibble: 50 × 1 #>    mytext       #>    <chr>        #>  1 You          #>  2 wish         #>  3 to           #>  4 know         #>  5 about        #>  6 my           #>  7 grandfather. #>  8 Well,        #>  9 he           #> 10 is           #> # ℹ 40 more rows"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Dialogue_Messy.html","id":null,"dir":"Reference","previous_headings":"","what":"Messy Dialogue Transcript — Dialogue_Messy","title":"Messy Dialogue Transcript — Dialogue_Messy","text":"sample dyadic conversation transcript two people taslking; Messy string data conversation tramscript, mulyiple lines per person per turn, missing observations, fragments, punctuations interspersed single words. Two people talking .","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Dialogue_Messy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Messy Dialogue Transcript — Dialogue_Messy","text":"","code":"Dialogue_Messy"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Dialogue_Messy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Messy Dialogue Transcript — Dialogue_Messy","text":"## \"Dialogue_Messy\" data frame 75 rows 2 columns: word text language transcript speaker Mary Peter: fictional speaker identities","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Dialogue_Structured.html","id":null,"dir":"Reference","previous_headings":"","what":"Dialogue Transcript Perfectly Formatted — Dialogue_Structured","title":"Dialogue Transcript Perfectly Formatted — Dialogue_Structured","text":"Perfectly pre-fomrmatted data structure 2 people coversing 1-word utterances back forth.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Dialogue_Structured.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dialogue Transcript Perfectly Formatted — Dialogue_Structured","text":"","code":"Dialogue_Structured"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Dialogue_Structured.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dialogue Transcript Perfectly Formatted — Dialogue_Structured","text":"## \"Dialogue_Structured\" data frame 50 rows 2 vars: mytext text language transcript speaker P1 P2 fictional interlocutor identities","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Grandfather_Passage.html","id":null,"dir":"Reference","previous_headings":"","what":"The Grandfather Passage: A Standardized Reading Passage — Grandfather_Passage","title":"The Grandfather Passage: A Standardized Reading Passage — Grandfather_Passage","text":"monologue discourse sample. Grandfather Passage well-known test reading aloud.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Grandfather_Passage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Grandfather Passage: A Standardized Reading Passage — Grandfather_Passage","text":"","code":"Grandfather_Passage"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Grandfather_Passage.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The Grandfather Passage: A Standardized Reading Passage — Grandfather_Passage","text":"## \"Grandfather_Passage\" data frame 1 observation 1 variable: mytext text Grandfather Passage unsplit","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Monologue_Messy.html","id":null,"dir":"Reference","previous_headings":"","what":"A Sample Messy Monologue Transcript — Monologue_Messy","title":"A Sample Messy Monologue Transcript — Monologue_Messy","text":"talker delineated. Messy string data composed missing observations, fragments, punctuations interspersed single words.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Monologue_Messy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Sample Messy Monologue Transcript — Monologue_Messy","text":"","code":"Monologue_Messy"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Monologue_Messy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A Sample Messy Monologue Transcript — Monologue_Messy","text":"## \"Monologue_Messy\" data.frame 74 obs 1 var mytext text hypothetical language transcript","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Monologue_Structured.html","id":null,"dir":"Reference","previous_headings":"","what":"A Sample Structured Monologue Transcript — Monologue_Structured","title":"A Sample Structured Monologue Transcript — Monologue_Structured","text":"talker delineated. Idealized/structured transcript missing observations, fragments, multiword utterances, already split one-word-per-row","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Monologue_Structured.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A Sample Structured Monologue Transcript — Monologue_Structured","text":"","code":"Monologue_Structured"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Monologue_Structured.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A Sample Structured Monologue Transcript — Monologue_Structured","text":"## \"Monologue_Structured\" data.frame 25 obs, 2 vars: mytext text hypothetical 'ideal' language transcript timestamp simulated metadata timestamp","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Semantic_Clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Semantic Category Fluency Data: Word List Blocked by Semantic Category — Semantic_Clusters","title":"Simulated Semantic Category Fluency Data: Word List Blocked by Semantic Category — Semantic_Clusters","text":"talker delineated. Vector 20 words, 5 4 categories, Good examining clustering","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Semantic_Clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Semantic Category Fluency Data: Word List Blocked by Semantic Category — Semantic_Clusters","text":"","code":"Semantic_Clusters"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Semantic_Clusters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Semantic Category Fluency Data: Word List Blocked by Semantic Category — Semantic_Clusters","text":"## \"Semantic_Clusters\" data frame 20 rows 3 columns: ID_JR sequential numeric identifier word target text category semantic category target word","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Word_Pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Column Arrayed Word Pairs for Pairwise Distance — Word_Pairs","title":"Column Arrayed Word Pairs for Pairwise Distance — Word_Pairs","text":"first target word computing distance one column, second word another column.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Word_Pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Column Arrayed Word Pairs for Pairwise Distance — Word_Pairs","text":"","code":"Word_Pairs"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/Word_Pairs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Column Arrayed Word Pairs for Pairwise Distance — Word_Pairs","text":"## \"Word_Pairs\" data frame 27 rows 2 columns: word1 text corresponding first word pair contrast word2 text corresponding second word pair contrast","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_dialogue.html","id":null,"dir":"Reference","previous_headings":"","what":"clean_dialogue — clean_dialogue","title":"clean_dialogue — clean_dialogue","text":"Cleans transcript two talkers. User specifies dataframe column name target text stored arguments function. Default option lemmatize strings. Function splits unlists text output one-row-per-word format marked unique numeric identifier (.e., 'id_orig')","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_dialogue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean_dialogue — clean_dialogue","text":"","code":"clean_dialogue(   dat,   wordcol,   whotalks,   clean = TRUE,   omit_stops = TRUE,   lemmatize = TRUE,   split_strings = TRUE )"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_dialogue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean_dialogue — clean_dialogue","text":"dat datataframe least one target column string data wordcol quoted column name storing strings cleaned split whotalks quoted column name speaker/talker identities factorized clean T/F apply cleaning transformations (default TRUE) omit_stops T/F user wishes remove stopwords (default TRUE) lemmatize T/F user wishes lemmatize string (default TRUE) split_strings option T/F (default T) split multiword contractions separate rows","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_dialogue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean_dialogue — clean_dialogue","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_monologue.html","id":null,"dir":"Reference","previous_headings":"","what":"clean_monologue — clean_monologue","title":"clean_monologue — clean_monologue","text":"Cleans formats text. User specifies dataframe column name target text stored arguments function. Default option lemmatize strings. Function splits unlists text output one-row-per-word format marked unique numeric identifier (.e., 'id_orig')","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_monologue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean_monologue — clean_monologue","text":"","code":"clean_monologue(   dat,   wordcol,   clean = TRUE,   omit_stops = TRUE,   lemmatize = TRUE,   split_strings = TRUE )"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_monologue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean_monologue — clean_monologue","text":"dat dataframe least one target column string data wordcol quoted column name storing strings cleaned split clean apply cleaning functions (lowercase etc) default TRUE omit_stops option omitting stopwords default TRUE lemmatize option lemmatizing strings default TRUE split_strings option T/F (default T) split multiword utterances separate rows","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_monologue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean_monologue — clean_monologue","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_paired_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"clean_paired_cols — clean_paired_cols","title":"clean_paired_cols — clean_paired_cols","text":"Cleans transcript word pairs arrayed two columns.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_paired_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean_paired_cols — clean_paired_cols","text":"","code":"clean_paired_cols(   dat,   wordcol1,   wordcol2,   clean = TRUE,   omit_stops = TRUE,   lemmatize = TRUE )"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_paired_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean_paired_cols — clean_paired_cols","text":"dat dataframe two columns words want pairwise distance wordcol1 quoted column name storing first string comparison wordcol2 quoted column name storing second string comparison clean T/F default T specifies whether apply cleaning transformations leave data alone omit_stops T/F user wishes remove stopwords (default TRUE) lemmatize T/F user wishes lemmatize string (default TRUE)","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_paired_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean_paired_cols — clean_paired_cols","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_unordered.html","id":null,"dir":"Reference","previous_headings":"","what":"clean_unordered — clean_unordered","title":"clean_unordered — clean_unordered","text":"Cleans formats text. User specifies dataframe column name target text stored. Word order matter (words shuffled later). Cleaning takes first instance word.","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_unordered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clean_unordered — clean_unordered","text":"","code":"clean_unordered(   dat,   wordcol,   clean = TRUE,   omit_stops = TRUE,   lemmatize = TRUE,   split_strings = TRUE )"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_unordered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clean_unordered — clean_unordered","text":"dat dataframe least one target column string data wordcol quoted column name storing strings cleaned split clean apply cleaning functions (lowercase etc) default TRUE omit_stops option omitting stopwords default TRUE lemmatize option lemmatizing strings default TRUE split_strings option splitting multiple words one row across rows default TRUE","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/clean_unordered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clean_unordered — clean_unordered","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_anchor.html","id":null,"dir":"Reference","previous_headings":"","what":"dist_anchor — dist_anchor","title":"dist_anchor — dist_anchor","text":"Function takes dataframe cleaned using 'clean_monologue', computes rolling chunk--chunk distance user-specified ngram size (e.g., 2-word chunks)","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_anchor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dist_anchor — dist_anchor","text":"","code":"dist_anchor(dat, anchor_size = 10)"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_anchor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dist_anchor — dist_anchor","text":"dat dataframe prepped using 'clean_monologue' fn anchor_size integer specifying number words initial chunk comparison new words sample unfolds","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_anchor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dist_anchor — dist_anchor","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_dialogue.html","id":null,"dir":"Reference","previous_headings":"","what":"dist_dialogue — dist_dialogue","title":"dist_dialogue — dist_dialogue","text":"Function takes dataframe cleaned using 'clean_dialogue' computes two metrics semantic distance turn--turn indexing 'talker' column. Sums respective semantic vectors within tuern, cosine distance next turn's composite vector","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_dialogue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dist_dialogue — dist_dialogue","text":"","code":"dist_dialogue(dat)"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_dialogue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dist_dialogue — dist_dialogue","text":"dat dataframe prepped using 'clean_dialogue' fn talker data turncount appended","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_dialogue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dist_dialogue — dist_dialogue","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"dist_matrix — dist_matrix","title":"dist_matrix — dist_matrix","text":"Function takes dataframe cleaned using 'clean_unordered4matrix', pairwise distance elements matrix","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dist_matrix — dist_matrix","text":"","code":"dist_matrix(dat, dist_type = \"embedding\")"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dist_matrix — dist_matrix","text":"dat dataframe prepped using 'clean_unordered4matrix' fn dist_type semantic norms running distance matrix default='embedding', 'SD15'","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dist_matrix — dist_matrix","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_ngram2ngram.html","id":null,"dir":"Reference","previous_headings":"","what":"dist_ngram2ngram — dist_ngram2ngram","title":"dist_ngram2ngram — dist_ngram2ngram","text":"Function takes dataframe cleaned using 'clean_monologue', computes rolling chunk--chunk distance user-specified ngram size (e.g., 2-word chunks)","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_ngram2ngram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dist_ngram2ngram — dist_ngram2ngram","text":"","code":"dist_ngram2ngram(dat, ngram)"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_ngram2ngram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dist_ngram2ngram — dist_ngram2ngram","text":"dat dataframe prepped using 'clean_monologue' fn ngram integer specifying window size words computing distance target word","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_ngram2ngram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dist_ngram2ngram — dist_ngram2ngram","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_ngram2word.html","id":null,"dir":"Reference","previous_headings":"","what":"dist_ngram2word — dist_ngram2word","title":"dist_ngram2word — dist_ngram2word","text":"Function takes dataframe cleaned using 'clean_monologue', computes two metrics semantic distance word relative average semantic vectors within n-word window appearing word. User specifies window (ngram) size. window 'rolls' across language sample providing distance metrics","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_ngram2word.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dist_ngram2word — dist_ngram2word","text":"","code":"dist_ngram2word(dat, ngram)"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_ngram2word.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dist_ngram2word — dist_ngram2word","text":"dat dataframe prepped using 'clean_monologue' fn ngram integer specifying window size words computing distance target word go back skipping NAs content words equals ngram window","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_ngram2word.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dist_ngram2word — dist_ngram2word","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_paired_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"dist_paired_cols — dist_paired_cols","title":"dist_paired_cols — dist_paired_cols","text":"Function takes dataframe cleaned using 'clean_2columns', computes two metrics semantic distance word pair arrayed Col1 vs. Col2","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_paired_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dist_paired_cols — dist_paired_cols","text":"","code":"dist_paired_cols(dat)"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_paired_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dist_paired_cols — dist_paired_cols","text":"dat dataframe prepped using clean_2columns' word pairs arrayed two columns","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/dist_paired_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dist_paired_cols — dist_paired_cols","text":"dataframe","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/viz_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"viz_clusters — viz_clusters","title":"viz_clusters — viz_clusters","text":"viz_clusters","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/viz_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viz_clusters — viz_clusters","text":"","code":"viz_clusters(distmat, type = \"dendrogram\")"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/viz_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viz_clusters — viz_clusters","text":"distmat square matrix cosine dist values (distance matrix!) generated 'dist_matrix' function type quoted argument 'dendrogram' default, 'network' alternative","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/viz_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viz_clusters — viz_clusters","text":"plot dendrogram","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/viz_monologue.html","id":null,"dir":"Reference","previous_headings":"","what":"viz_monologue — viz_monologue","title":"viz_monologue — viz_monologue","text":"viz_monologue","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/viz_monologue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"viz_monologue — viz_monologue","text":"","code":"viz_monologue(   dat,   interpolate = TRUE,   roll_avg = 0,   facet = TRUE,   annotate = TRUE )"},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/viz_monologue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"viz_monologue — viz_monologue","text":"dat dataframe semantic distance values columns (CosDist_) labeled 'row_id_postsplit' interpolate T/F linear interpolation across missing observations 'row_id_postsplit' (default T) roll_avg window computing rolling average smoothing data, default 0 (smoothing) facet T/F facets data distance measure (CosDist_Glo vs. CosDist_SD15) annotate T/F option annotating large semantic distance jumps z>2.5 red vertical line","code":""},{"path":"https://reilly-conceptscognitionlab.github.io/SemanticDistance/reference/viz_monologue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"viz_monologue — viz_monologue","text":"dataframe","code":""}]
